import { Recipe } from '~/models/recipe/Recipe';

export const defaultRecipe: Recipe = {
      'ts': 1615709213875,
      'name': 'Default',
      'description': 'Targeted at salt & chlorine pools, this plan takes 6 readings & uses calcium hypochlorite as the sanitizer. ',
      'id': 'vast_argument_756',
      'appVersion': '1.3.0',
      'isOfficial': true,
      'treatments': [
        {
          'name': 'Calcium Hypochlorite',
          'var': 'calc_hypo',
          'function': "// This target is initialized with a \"let\" because I might change it later.\nlet fcTarget = (c.fc.min + c.fc.max) / 2.0;\n\n// If we need to shock, adjust the target to breakpoint chloriniation:\nconst combined = r.tc - r.fc;\nif (combined > 0.11) {\n    const breakpoint = combined * 10;\n    fcTarget = breakpoint;\n    // Check the insane case where there is already a breakpoint amount of chlorine?\n    if (r.fc > fcTarget) { return 0; }\n} else {\n    // If we don't need to shock, just exit if the reading is above the min target range:\n    if (r.fc > c.fc.min) {\n        return 0;\n    }\n}\n\n// If we've made it this far, then we probably need to add some chlorine.\n// Let's figure out how much:\nconst fcDelta = fcTarget - r.fc;\n\n// This number is more art than science. It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst calcHypo67Multiplier = .000208;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * fcDelta * calcHypo67Multiplier;",
          'concentration': 67,
          'type': 'dryChemical',
        },
        {
          'name': 'Sodium Carbonate',
          'var': 'soda_ash',
          'function': "// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);",
          'concentration': 100,
          'type': 'dryChemical',
        },
        {
          'name': 'Sodium Bicarbonate',
          'var': 'baking_soda',
          'function': "// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.",
          'concentration': 100,
          'type': 'dryChemical',
        },
        {
          'name': 'Muriatic Acid',
          'var': 'm_acid',
          'function': "// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);",
          'concentration': 31,
          'type': 'liquidChemical',
        },
        {
          'name': 'Calcium Chloride',
          'var': 'cal_chlor',
          'function': "// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;",
          'concentration': 100,
          'type': 'dryChemical',
        },
        {
          'name': 'Cyanuric Acid',
          'var': 'cya',
          'function': 'if (r.cya >= c.cya.min) {\n    return 0;\n}\n\nconst target = (c.cya.min + c.cya.max) / 2.0;\nconst delta = target - r.cya;\nconst multiplier = .00013;\n\nreturn p.gallons * delta * multiplier;',
          'concentration': 100,
          'type': 'dryChemical',
        },
      ],
      'readings': [
        {
          'name': 'Free Chlorine',
          'var': 'fc',
          'sliderMin': 0,
          'sliderMax': 7,
          'idealMin': null,
          'idealMax': null,
          'type': 'number',
          'decimalPlaces': 1,
          'units': 'ppm',
          'defaultValue': 3,
        },
        {
          'name': 'Total Chlorine',
          'var': 'tc',
          'sliderMin': 0,
          'sliderMax': 10,
          'idealMin': null,
          'idealMax': null,
          'type': 'number',
          'decimalPlaces': 1,
          'units': 'ppm',
          'defaultValue': 0,
        },
        {
          'name': 'pH',
          'var': 'ph',
          'sliderMin': 3,
          'sliderMax': 10,
          'idealMin': null,
          'idealMax': null,
          'type': 'number',
          'decimalPlaces': 1,
          'units': '',
          'defaultValue': 7.4,
        },
        {
          'name': 'Total Alkalinity',
          'var': 'ta',
          'sliderMin': 50,
          'sliderMax': 150,
          'idealMin': null,
          'idealMax': null,
          'type': 'number',
          'decimalPlaces': 0,
          'units': 'ppm',
          'defaultValue': 99.7,
        },
        {
          'name': 'Calcium Hardness',
          'var': 'ch',
          'sliderMin': 0,
          'sliderMax': 600,
          'idealMin': null,
          'idealMax': null,
          'type': 'number',
          'decimalPlaces': 0,
          'units': 'ppm',
          'defaultValue': 299.8,
        },
        {
          'name': 'Cyanuric Acid',
          'var': 'cya',
          'sliderMin': 0,
          'sliderMax': 80,
          'idealMin': null,
          'idealMax': null,
          'type': 'number',
          'decimalPlaces': 0,
          'units': 'ppm',
          'defaultValue': 39.9,
        },
      ],
      'custom': [
        {
          'name': 'Free Chlorine',
          'description': null,
          'var': 'fc',
          'defaults': [
            {
              'wallType': null,
              'min': 3,
              'max': 5,
            },
          ],
        },
        {
          'name': 'pH',
          'description': null,
          'var': 'ph',
          'defaults': [
            {
              'wallType': null,
              'min': 7.2,
              'max': 7.6,
            },
          ],
        },
        {
          'name': 'Total Alkalinity',
          'description': null,
          'var': 'ta',
          'defaults': [
            {
              'wallType': null,
              'min': 80,
              'max': 120,
            },
          ],
        },
        {
          'name': 'Calcium Hardness',
          'description': null,
          'var': 'ch',
          'defaults': [
            {
              'wallType': null,
              'min': 200,
              'max': 400,
            },
          ],
        },
        {
          'name': 'Cyanuric Acid',
          'description': null,
          'var': 'cya',
          'defaults': [
            {
              'wallType': null,
              'min': 30,
              'max': 50,
            },
          ],
        },
      ],
  };
