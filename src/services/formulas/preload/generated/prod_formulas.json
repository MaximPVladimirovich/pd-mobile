{"defaultFormulaKeys":{"chlorine":["vast_argument_756|1626732444892","glum_marriage_172|1624990304021","awful_picture_479|1626652067013"],"uv":["academic_mouth_0|1624990360488","vast_argument_756|1626732444892","enraged_secret_755|1611287733004"],"salt_water":["jumpy_bear_993|1626722293385"],"bromine":["meaty_start_588|1617997348206","moist_western_543|1615712213103"],"ozone":["enraged_secret_755|1611287733004"],"copper":["gleaming_guard_569|1618183192756"]},"formulas":[{"id":"vast_argument_756","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"Chlorine (calc-hypo)","description":"Targeted at salt & chlorine pools, this plan takes 6 readings & uses calcium hypochlorite as the sanitizer. ","ts":1626732444892,"appVersion":"1.0.0","isOfficial":true,"readings":[{"name":"Free Chlorine","var":"fc","sliderMin":0,"sliderMax":7,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Chlorine","var":"tc","sliderMin":0,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0.3,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.5,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":50,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":600,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":148,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Cyanuric Acid","var":"cya","sliderMin":0,"sliderMax":80,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":39.9,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Temperature","var":"temp_f","sliderMin":30,"sliderMax":120,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"f","defaultValue":37,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Temperature","var":"temp_c","sliderMin":0,"sliderMax":60,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"c","defaultValue":28,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"TDS","var":"tds","sliderMin":0,"sliderMax":4000,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":328,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Calcium Hypochlorite","var":"calc_hypo","function":"// This target is initialized with a \"let\" because I might change it later.\nlet fcTarget = (c.fc.min + c.fc.max) / 2.0;\n\n// If we need to shock, adjust the target to breakpoint chloriniation:\nconst combined = r.tc - r.fc;\nif (combined > 0.11) {\n    const breakpoint = combined * 10;\n    fcTarget = breakpoint;\n    // Check the insane case where there is already a breakpoint amount of chlorine?\n    if (r.fc > fcTarget) { return 0; }\n} else {\n    // If we don't need to shock, just exit if the reading is above the min target range:\n    if (r.fc >= c.fc.min) {\n        return 0;\n    }\n}\n\n// If we've made it this far, then we probably need to add some chlorine.\n// Let's figure out how much:\nconst fcDelta = fcTarget - r.fc;\n\n// This number is more art than science. It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst calcHypo67Multiplier = .000208;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * fcDelta * calcHypo67Multiplier;","type":"dryChemical","concentration":67,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"liquidChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Cyanuric Acid","var":"cya","function":"if (r.cya >= c.cya.min) {\n    return 0;\n}\n\nconst target = (c.cya.min + c.cya.max) / 2.0;\nconst delta = target - r.cya;\nconst multiplier = .00013;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"LSI","var":"lsi","function":"// We need these 4 readings + temperature to calculate this:\nif (s.ch || s.ph || s.tds || s.ta || (s.temp_f && s.temp_c)) {\n    return null;\n}\n\n// Prefer the temp_f reading (if the user took both for some reason). But, either works:\nconst degrees_c = (s.temp_f) ? r.temp_c : ((r.temp_f - 32) / 1.8);\n\nconst aa = (Math.log10(r.tds) - 1) / 10.0;\nconst bb = (-13.12 * Math.log10(degrees_c + 273)) + 34.55;\nconst cc = Math.log10(r.ch) - .4;\nconst dd = Math.log10(r.ta);\n\nreturn r.ph - 9.3 - aa - bb + cc + dd;","type":"calculation","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"Free Chlorine","var":"fc","description":null,"defaults":[{"wallType":null,"min":3,"max":5,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":7.2,"max":7.6,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":120,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":200,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Cyanuric Acid","var":"cya","description":null,"defaults":[{"wallType":null,"min":30,"max":50,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"glum_marriage_172","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"Chlorine (dichlor)","description":"This is similar to the default chlorine recipe, but uses dichlor (dichloro-s-triazinetrione) as the sanitizer.","ts":1624990304021,"appVersion":"1.0.0","isOfficial":true,"readings":[{"name":"Free Chlorine","var":"fc","sliderMin":0,"sliderMax":7,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":3,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Chlorine","var":"tc","sliderMin":0,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":99.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":600,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":299.8,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Cyanuric Acid","var":"cya","sliderMin":0,"sliderMax":80,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":40.1,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Dichlor","var":"dichlor","function":"// This target is initialized with a \"let\" because I might change it later.\nlet fcTarget = (c.fc.min + c.fc.max) / 2.0;\n\n// If we need to shock, adjust the target to breakpoint chloriniation:\nconst combined = r.tc - r.fc;\nif (combined > 0.11) {\n    const breakpoint = combined * 10;\n    fcTarget = breakpoint;\n    // Check the insane case where there is already a breakpoint amount of chlorine?\n    if (r.fc > fcTarget) { return 0; }\n} else {\n    // If we don't need to shock, just exit if the reading is above the min target range:\n    if (r.fc > c.fc.min) {\n        return 0;\n    }\n}\n\n// If we've made it this far, then we probably need to add some chlorine.\n// Let's figure out how much:\nconst fcDelta = fcTarget - r.fc;\n\n// This number is more art than science. It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst dichlorMultiplier = .000126;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * fcDelta * dichlorMultiplier;","type":"dryChemical","concentration":99,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"dryChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Cyanuric Acid","var":"cya","function":"if (r.cya >= c.cya.min) {\n    return 0;\n}\n\nconst target = (c.cya.min + c.cya.max) / 2.0;\nlet delta = target - r.cya;\n\n// If dichlor was already added, then account for its effect on the CYA:\nif (t.dichlor > 0) {\n    const cyaDeltaFromDichlor = t.dichlor / (.0002735 * p.gallons);\n    delta = delta - cyaDeltaFromDichlor;\n}\nif (delta <= 0) {\n    return 0;\n}\n\n\nconst multiplier = .00013;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"Free Chlorine","var":"fc","description":null,"defaults":[{"wallType":null,"min":3,"max":5,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":7.2,"max":7.6,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":120,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":200,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Cyanuric Acid","var":"cya","description":null,"defaults":[{"wallType":null,"min":30,"max":50,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"awful_picture_479","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"Pool Doctor (old)","description":"Targeted at salt & chlorine pools, this plan takes 6 readings & uses calcium hypochlorite as the sanitizer. ","ts":1626652067013,"appVersion":"1.0.0","isOfficial":false,"readings":[{"name":"Free Chlorine","var":"fc","sliderMin":0,"sliderMax":7,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":3,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Chlorine","var":"tc","sliderMin":0,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":99.7,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":600,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":299.8,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Cyanuric Acid","var":"cya","sliderMin":0,"sliderMax":80,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":39.9,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Calcium Hypochlorite","var":"calc_hypo","function":"// This target is initialized with a \"let\" because I might change it later.\nlet fcTarget = (c.fc.min + c.fc.max) / 2.0;\n\n// If we need to shock, adjust the target to breakpoint chloriniation:\nconst combined = r.tc - r.fc;\nif (combined > 0.11) {\n    const breakpoint = combined * 10;\n    fcTarget = breakpoint;\n    // Check the insane case where there is already a breakpoint amount of chlorine?\n    if (r.fc > fcTarget) { return 0; }\n} else {\n    // If we don't need to shock, just exit if the reading is above the min target range:\n    if (r.fc >= c.fc.min) {\n        return 0;\n    }\n}\n\n// If we've made it this far, then we probably need to add some chlorine.\n// Let's figure out how much:\nconst fcDelta = fcTarget - r.fc;\n\n// This number is more art than science. It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst calcHypo67Multiplier = .000208;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * fcDelta * calcHypo67Multiplier;","type":"dryChemical","concentration":67,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"liquidChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Cyanuric Acid","var":"cya","function":"if (r.cya >= c.cya.min) {\n    return 0;\n}\n\nconst target = (c.cya.min + c.cya.max) / 2.0;\nconst delta = target - r.cya;\nconst multiplier = .00013;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"Free Chlorine","var":"fc","description":null,"defaults":[{"wallType":null,"min":3,"max":5,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":7.2,"max":7.6,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":120,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":200,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Cyanuric Acid","var":"cya","description":null,"defaults":[{"wallType":null,"min":30,"max":50,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"academic_mouth_0","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"UV (dichlor)","description":"For UV pools that prefer to use dichlor to maintain trace chlorine & shock the pool.","ts":1624990360488,"appVersion":"1.0.0","isOfficial":false,"readings":[{"name":"Free Chlorine","var":"fc","sliderMin":0,"sliderMax":7,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":3,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Chlorine","var":"tc","sliderMin":0,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":99.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":600,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":299.8,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Cyanuric Acid","var":"cya","sliderMin":0,"sliderMax":80,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":40.1,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Dichlor","var":"dichlor","function":"// This target is initialized with a \"let\" because I might change it later.\nlet fcTarget = (c.fc.min + c.fc.max) / 2.0;\n\n// If we need to shock, adjust the target to breakpoint chloriniation:\nconst combined = r.tc - r.fc;\nif (combined > 0.11) {\n    const breakpoint = combined * 10;\n    fcTarget = breakpoint;\n    // Check the insane case where there is already a breakpoint amount of chlorine?\n    if (r.fc > fcTarget) { return 0; }\n} else {\n    // If we don't need to shock, just exit if the reading is above the min target range:\n    if (r.fc > c.fc.min) {\n        return 0;\n    }\n}\n\n// If we've made it this far, then we probably need to add some chlorine.\n// Let's figure out how much:\nconst fcDelta = fcTarget - r.fc;\n\n// This number is more art than science. It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst dichlorMultiplier = .000126;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * fcDelta * dichlorMultiplier;","type":"dryChemical","concentration":99,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"dryChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Cyanuric Acid","var":"cya","function":"if (r.cya >= c.cya.min) {\n    return 0;\n}\n\nconst target = (c.cya.min + c.cya.max) / 2.0;\nlet delta = target - r.cya;\n\n// If dichlor was already added, then account for its effect on the CYA:\nif (t.dichlor > 0) {\n    const cyaDeltaFromDichlor = t.dichlor / (.0002735 * p.gallons);\n    delta = delta - cyaDeltaFromDichlor;\n}\nif (delta <= 0) {\n    return 0;\n}\n\n\nconst multiplier = .00013;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"Free Chlorine","var":"fc","description":null,"defaults":[{"wallType":null,"min":0.3,"max":0.5,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":7.2,"max":7.6,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":120,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":200,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Cyanuric Acid","var":"cya","description":null,"defaults":[{"wallType":null,"min":30,"max":50,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"enraged_secret_755","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"SPA 1800L Uv & Ozone & Sodium Bisulfate (experimental)","description":"Target for Spa 1800L with only UV & Ozone for sanitation.\nThis is Experimental. Do not use if you don’t send water sample for testing.\n\nI created this fork to try & replace the muriatic acid with Sodium Bisulfate, per this request:\nhttps://forum.pooldash.com/t/sodium-hydrogen-sulfate/71","ts":1611287733004,"appVersion":"1.0.0","isOfficial":false,"readings":[{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"TA Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":100.1,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":600,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":299.8,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Temperature","var":"temp_f","sliderMin":5,"sliderMax":40,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"°C","defaultValue":37.2,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= 7.2) {\n    return 0;\n}\n\n// Aim for a pH of... 7.4?\nconst pHDelta = 7.4 - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= 80) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nlet taDelta = 100 - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bisulfate","var":"na_bs","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < 7.6) {\n  return 0;\n}\n\nconst targetPh = 7.4;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0036;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0037;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0039;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0040;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0042 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= 200) {\n    return 0;\n}\n\nconst delta = 250 - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"}],"custom":[],"__typename":"Formula"},{"id":"jumpy_bear_993","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"Salt Pool","description":"Targeted at salt pools. \n\nThis recipe will suggest:\nSalt Additions\nTo Shock or Not\nTo Backwash or Not\nSalt Gen Time Increase or Decrease\nPhosphate Treatment\nCyanuric Acid\npH\nAlkalinity\nCalcium Hardness\nChlorine is adjusted via your Salt Generator.","ts":1626722293385,"appVersion":"1.0.0","isOfficial":true,"readings":[{"name":"Free Chlorine","var":"fc","sliderMin":0,"sliderMax":7,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":2.2,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Chlorine","var":"tc","sliderMin":0,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":5.9,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":99.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":600,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":299.8,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Cyanuric Acid","var":"cya","sliderMin":0,"sliderMax":80,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":39.9,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Phosphate","var":"phosp","sliderMin":0,"sliderMax":5000,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":3624.3,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Salt Level","var":"NaCl","sliderMin":0,"sliderMax":5000,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":3200,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Filter Pressure","var":"flt_prs","sliderMin":0,"sliderMax":50,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"lbs","defaultValue":32.7,"isDefaultOn":false,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Dichlor Shock","var":"dichlor","function":"// This target is initialized with a \"let\" because I might change it later.\nlet fcTarget = (c.fc.min + c.fc.max) / 2.0;\n\n// If we need to shock, adjust the target to breakpoint chloriniation:\nconst combined = r.tc - r.fc;\nif (combined > 0.11) {\n    const breakpoint = combined * 10;\n    fcTarget = breakpoint;\n    // Check the insane case where there is already a breakpoint amount of chlorine?\n    if (r.fc > fcTarget) { return 0; }\n} else {\n    // If we don't need to shock, we'll turn up the SWG cell if we need to touch up the levels at all:\n    return 0;\n}\n\n// If we've made it this far, then we probably need to add some chlorine.\n// Let's figure out how much:\nconst fcDelta = fcTarget - r.fc;\n\n// This number is more art than science. It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst dichlorMultiplier = .000126;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * fcDelta * dichlorMultiplier;","type":"dryChemical","concentration":99,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"liquidChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Cyanuric Acid","var":"cya","function":"if (r.cya >= c.cya.min) {\n    return 0;\n}\n\nconst target = (c.cya.min + c.cya.max) / 2.0;\nconst delta = target - r.cya;\nconst multiplier = .00013;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Phosphate Remover","var":"phosp","function":"//Phosphate\r\n//Anything above 0 is not ideal.\r\n//Anything over 100 needs treatment\r\n\r\n\r\nif (r.phosp < c.phosp.max) {\r\n  return 0;\r\n}\r\n\r\n// 1oz per 10000 gal removed 250 ppb\r\n// 1/2 oz per 5000 gal remove 250 ppb\r\n//1250 gallons reduce by 250 ppb requires .125 oz\r\n\r\nconst galMultiplier = p.gallons / 1250;\r\nconst doseage = .125;\r\nconst reduction = r.phosp / 250;\r\n\r\nreturn Math.round(galMultiplier * reduction * doseage * 100.0) / 100.0;\r\n","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"NaCl (Salt)","var":"NaCl","function":"if (r.NaCl >= c.NaCl.min) {\r\n return 0;\r\n}\r\n\r\nconst target = (c.NaCl.min + c.NaCl.max) / 2.0;\r\nconst saltDelta = target - r.NaCl;\r\n\r\n// Thanks, Paul!\r\nconst magicMultiplierDerivedFromPsoup = 0.0001333714;\r\n\r\nreturn saltDelta * p.gallons * magicMultiplierDerivedFromPsoup;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Backwash","var":"Backwash","function":"if (r.flt_prs < c.flt_prs.min)\n{\n    return 0;\n}\n\nreturn 1;","type":"task","concentration":100,"__typename":"Treatment"},{"name":"Increase Salt Generator","var":"Increase_Salt_Gen_Output","function":"if ( r.NaCl < c.NaCl.min)\r\n{\r\n   return 1;\r\n}\r\nreturn 0;","type":"task","concentration":100,"__typename":"Treatment"},{"name":"Decrease Salt Generator","var":"Decrease_Salt_Gen_Output","function":" if ( r.NaCl >= c.NaCl.max)\r\n{\r\n    return 1;\r\n}\r\nreturn 0;","type":"task","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"Free Chlorine","var":"fc","description":null,"defaults":[{"wallType":null,"min":2,"max":3,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":7.2,"max":7.6,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":120,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":200,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Cyanuric Acid","var":"cya","description":null,"defaults":[{"wallType":null,"min":30,"max":50,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Phosphate","var":"phosp","description":null,"defaults":[{"wallType":null,"min":0,"max":100,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Salt Level","var":"NaCl","description":null,"defaults":[{"wallType":null,"min":3200,"max":3200,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Filter Pressure","var":"flt_prs","description":null,"defaults":[{"wallType":null,"min":8,"max":10,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Shock Level","var":"Cl_Sl","description":null,"defaults":[{"wallType":null,"min":0,"max":0.5,"__typename":"DefaultRange"},{"wallType":null,"min":0,"max":0.5,"__typename":"DefaultRange"},{"wallType":null,"min":0,"max":0.5,"__typename":"DefaultRange"},{"wallType":null,"min":0,"max":0.5,"__typename":"DefaultRange"},{"wallType":null,"min":0,"max":0.5,"__typename":"DefaultRange"},{"wallType":null,"min":0,"max":0.5,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"meaty_start_588","author_id":"d72cd2b4-3afa-4797-88ee-a506d978a2d0","author_username":"psoup1965","name":"Bromine Spa","description":"This is a recipe for basic Bromine spas. Nothing fancy, just normal maintenance and logging.\n\nIncludes Phosphate and Hardness and Cyanuric Acid (some say it is not needed for bromine - debated issue)\nPlease Report any issues or suggestions to psoup1965","ts":1617997348206,"appVersion":"1.0.0","isOfficial":false,"readings":[{"name":"Bromine","var":"bro","sliderMin":0,"sliderMax":5,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Phosphates","var":"phosp","sliderMin":0,"sliderMax":9000,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppb","defaultValue":251.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":99.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":0,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Cyanuric Acid","var":"cya","sliderMin":0,"sliderMax":60,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":39.6,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":0,"sliderMax":500,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":300.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Bromine","var":"bromine","function":"// I think this is the ideal bromine reading?\nconst bromineTarget = (c.bro.min + c.bro.max) / 2.0;\n\n// If the bromine is already above the target, we don't need to add any more!\nif (r.bro >= c.bro.min) {\n    return 0;\n}\n\n// If we've made it this far, then we probably need to add some bromine.\n// Let's figure out how much:\nconst bromineDelta = bromineTarget - r.bro;\n\n// This number is the one that PoolDoctor used, but I don't remember where it came from.\n// It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst bromineMultiplier = .0001;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * bromineDelta * bromineMultiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"liquidChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"ch","function":"//Calcium Chloride (cal_chlor)\r\n// If the calcium hardness is above 200, we don't need to add any calcium chloride.\r\nif (r.ch >= c.ch.min) {\r\n    return 0;\r\n}\r\n\r\nconst target = (c.ch.min + c.ch.max) / 2.0;\r\nconst delta = target - r.ch;\r\nconst multiplier = .000144;\r\n\r\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Cyanuric Acid","var":"cya","function":"\r\n//Cyanuric Acid (cya)\r\nif (r.cya >= c.cya.min) {\r\n    return 0;\r\n}\r\n\r\nconst target = (c.cya.min + c.cya.max) / 2.0;\r\nconst delta = target - r.cya;\r\nconst multiplier = .00013;\r\n\r\nreturn p.gallons * delta * multiplier;","type":"liquidChemical","concentration":100,"__typename":"Treatment"},{"name":"Phosphate Remover","var":"phosp","function":"//Phosphate\r\n//Anything above 0 is not ideal.\r\n//Anything over 100 needs treatment\r\n\r\n\r\nif (r.phosp < c.phosp.max) {\r\n    return 0;\r\n    }\r\n\r\n// 1oz per 10000 gal removed 250 ppb\r\n// 1/2 oz per 5000 gal remove 250 ppb\r\n//1250 gallons reduce by 250 ppb requires .125 oz\r\n\r\nconst galMultiplier = p.gallons / 1250;\r\nconst doseage = .125;\r\nconst reduction = r.phosp / 250\r\nconst formula = galMultiplier * reduction * doseage;\r\n\r\nreturn formula;\r\n","type":"liquidChemical","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"Bromine","var":"bro","description":null,"defaults":[{"wallType":null,"min":0.5,"max":1,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Phosphates","var":"phosp","description":"Phosphates are nutrients for algae.  Keep levels low.. close to 0 if possible. Nothing is needed until after 100, but can be done to get to 0. Adding too much will cloudy water so go slow.","defaults":[{"wallType":null,"min":0,"max":100,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":150,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":"","defaults":[{"wallType":null,"min":7,"max":7,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Cyanuric Acid","var":"cya","description":null,"defaults":[{"wallType":null,"min":30,"max":60,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":200,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"moist_western_543","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"Spa Marvel + Bromine","description":"This is a recipe for Bromine spas using a natural sanitizer system, such as Spa Marvel. It assumes you want to keep trace bromine levels of around 0.75 ppm.\n\nThis assumes that you're adding the spa marvel product about every 3 months.","ts":1615712213103,"appVersion":"1.0.0","isOfficial":true,"readings":[{"name":"Bromine","var":"bro","sliderMin":0,"sliderMax":5,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"pH","var":"ph","sliderMin":3,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7.4,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":99.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Bromine","var":"bromine","function":"// I think this is the ideal bromine reading?\nconst bromineTarget = (c.bro.min + c.bro.max) / 2.0;\n\n// If the bromine is already above the target, we don't need to add any more!\nif (r.bro >= c.bro.min) {\n    return 0;\n}\n\n// If we've made it this far, then we probably need to add some bromine.\n// Let's figure out how much:\nconst bromineDelta = bromineTarget - r.bro;\n\n// This number is the one that PoolDoctor used, but I don't remember where it came from.\n// It's the approximate ounces of <chemical>\n// required to adjust the measurement by 1ppm in a 1 gallon pool.\n// The stronger a chemical is, the lower this number will be.\nconst bromineMultiplier = .0001;\n\n// We account for the pool's volume, the desired change, and the chemical's... potency?\nreturn p.gallons * bromineDelta * bromineMultiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"liquidChemical","concentration":31,"__typename":"Treatment"}],"custom":[{"name":"Bromine","var":"bro","description":null,"defaults":[{"wallType":null,"min":0.5,"max":1,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":7.2,"max":7.6,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":150,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"},{"id":"gleaming_guard_569","author_id":"79236fc2-b35b-4c70-95b3-6e09e9873f88","author_username":"gazzini","name":"ECOsmarte","description":"This recipe is for pools using the ECOsmarte copper / oxidation system. For the dissolved oxygen reading, it assumes the pool's elevation is approximately 1300 ft.","ts":1618183192756,"appVersion":"1.0.0","isOfficial":false,"readings":[{"name":"pH","var":"ph","sliderMin":4,"sliderMax":10,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"","defaultValue":7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Copper","var":"copper","sliderMin":0,"sliderMax":7,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":3,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Calcium Hardness","var":"ch","sliderMin":20,"sliderMax":700,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":299.8,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Phosphate","var":"phos","sliderMin":0,"sliderMax":3,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":0,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Temperature","var":"temp_f","sliderMin":60,"sliderMax":100,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"°f","defaultValue":90.1,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Total Alkalinity","var":"ta","sliderMin":50,"sliderMax":150,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":0,"units":"ppm","defaultValue":89.7,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"},{"name":"Dissolved Oxygen","var":"do","sliderMin":0,"sliderMax":15,"idealMin":null,"idealMax":null,"type":"number","decimalPlaces":1,"units":"ppm","defaultValue":1,"isDefaultOn":true,"offsetReadingVar":null,"__typename":"Reading"}],"treatments":[{"name":"Sodium Carbonate","var":"soda_ash","function":"// If the ph is already high enough, we don't need any soda ash.\nif (r.ph >= c.ph.min) {\n    return 0;\n}\n\n// The target is the average of the min & max (which can be configured by users)\nconst target = (c.ph.min + c.ph.max) / 2.0;\nconst pHDelta = target - r.ph;\n\n// This is lazy & unscientific... we just set a cap,\n// because we don't want to use too much of this stuff.\nconst maxAmount = p.gallons * .0048;\n\n\n// This is interesting -- the effect of adding a chemical to increase\n// the pH isn't \"linear\", but instead the measure will asymptotically approach\n// some pH, depending on what chemical you add.\n\n// In other words, the multiplier actually changes based on the pH measure.\n// This is just a rough approximation grabbed out of thin air -- if anyone\n// wants to \"remix\" this recipe with a better one, please do! We can use\n// sophisticated operators like Math.log(), I just don't do it yet...\nconst sodaAshMultiplier = .00035 * (r.ph + 1);\n\nconst calculatedAmount = p.gallons * pHDelta * sodaAshMultiplier;\n\n// Return the lower of the 2 numbers:\nreturn Math.min(calculatedAmount, maxAmount);","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Sodium Bicarbonate","var":"baking_soda","function":"// If the TA is already in good range, don't add any baking soda\nif (r.ta >= c.ta.min) {\n    return 0;\n}\n\n// Otherwise, shoot for the middle of the ideal range:\nconst target = (c.ta.min + c.ta.max) / 2.0;\nlet taDelta = target - r.ta;\n\n// Remember, soda ash (from the previous step) also affects the TA,\n// so we should calculate how much (if any) the soda ash has\n// already moved the TA & offset our new delta accordingly:\nconst sodaAshMultiplierForTA = .00014;\nconst taIncreaseFromSodaAsh = t.soda_ash / (sodaAshMultiplierForTA * p.gallons);\n\nif (taIncreaseFromSodaAsh >= taDelta) {\n  return 0;\n}\ntaDelta = taDelta - taIncreaseFromSodaAsh;\n\n// Now, calculate the amount of baking soda necessary to close the remaining gap.\nconst bakingSodaTAMultiplier = .000224;\nreturn p.gallons * taDelta * bakingSodaTAMultiplier;\n\n// NOTE: this ignores some complications. For instance, this new dose of\n// baking soda will also raise the pH, and could knock it above the ideal range.\n// If anyone wants to remix this recipe to account for this, you would be a hero.","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Muriatic Acid","var":"m_acid","function":"// Muriatic Acid helps to lower the pH. I personally don't like\n// how the acid makes the water slimy & unswimmable for a few hours...\n// but meh.\n\n// If the pH isn't too high... then don't worry about it!\nif (r.ph < c.ph.max) {\n  return 0;\n}\n\nconst targetPh = (c.ph.min + c.ph.max) / 2.0;\nconst phDelta = targetPh - r.ph;    // This will be a negative number.\n\n// This is not very precise, feel free to remix. It's another non-linear effect,\n// where the multiplier is different depending on the measure.\nlet multiplier = 0;\n\nif (r.ph > 8.2) {\n    multiplier = -.0027;\n}\nelse if (r.ph > 8.0) {\n    multiplier = -.0028;\n}\nelse if (r.ph > 7.8) {\n    multiplier = -.0029;\n}\nelse if (r.ph > 7.6) {\n    multiplier = -.0030;\n}\n\n// Cap the total amount of acid, just in-case someone enters a pH of 100 somehow:\nconst maxAmount = .0032 * p.gallons;\nconst calculatedAmount = p.gallons * phDelta * multiplier;\n\nreturn Math.min(maxAmount, calculatedAmount);","type":"liquidChemical","concentration":31,"__typename":"Treatment"},{"name":"Calcium Chloride","var":"cal_chlor","function":"// If the calcium hardness is above 200, we don't need to add any calcium chloride.\nif (r.ch >= c.ch.min) {\n    return 0;\n}\n\nconst target = (c.ch.min + c.ch.max) / 2.0;\nconst delta = target - r.ch;\nconst multiplier = .000144;\n\nreturn p.gallons * delta * multiplier;","type":"dryChemical","concentration":100,"__typename":"Treatment"},{"name":"Increase the Ionizer","var":"ionizer","function":"if (r.copper < c.copper.min) {\n    return 1;\n}\nreturn 0;","type":"task","concentration":100,"__typename":"Treatment"},{"name":"Increase the Oxidizer","var":"do","function":"// This operates off a toggle-switch, so you can't run both the ionizer and the oxidizer.\nif (t.ionizer) {\n    return 0;\n}\n\nif (r.do < c.do.min) {\n    return 1;\n}\nreturn 0;\n","type":"task","concentration":100,"__typename":"Treatment"},{"name":"Phosphate Remover","var":"phos_remover","function":"// I have no idea how to dose phosphate removers, so this is a cop-out.\n// If someone knows how to dose these properly, please fork this recipe\n// and change the treatment-type to a chemical.\nif (r.phos > c.phos.max) {\n    return 1;\n}\nreturn 0;","type":"task","concentration":100,"__typename":"Treatment"}],"custom":[{"name":"pH","var":"ph","description":null,"defaults":[{"wallType":null,"min":6.8,"max":7.2,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Copper","var":"copper","description":null,"defaults":[{"wallType":null,"min":0.4,"max":0.7,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Calcium Hardness","var":"ch","description":null,"defaults":[{"wallType":null,"min":400,"max":400,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Phosphate","var":"phos","description":null,"defaults":[{"wallType":null,"min":0,"max":0,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Temperature (f)","var":"temp_f","description":null,"defaults":[{"wallType":null,"min":32,"max":120,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Total Alkalinity","var":"ta","description":null,"defaults":[{"wallType":null,"min":80,"max":100,"__typename":"DefaultRange"}],"__typename":"TargetRange"},{"name":"Dissolved Oxygen","var":"do","description":null,"defaults":[{"wallType":null,"min":6,"max":7,"__typename":"DefaultRange"}],"__typename":"TargetRange"}],"__typename":"Formula"}]}